from collections import Counter

# Expected letter frequency in English (from most to least common)
ENGLISH_FREQ_ORDER = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'

def frequency_analysis(ciphertext):
    # Filter only alphabetic characters and convert to uppercase
    filtered = [char.upper() for char in ciphertext if char.isalpha()]
    freq = Counter(filtered)
    return freq

def build_substitution_table(cipher_freq):
    # Sort ciphertext letters by frequency
    sorted_cipher_letters = [item[0] for item in cipher_freq.most_common()]
    # Build mapping from ciphertext letter to guessed plaintext letter
    substitution = {}
    for i, letter in enumerate(sorted_cipher_letters):
        if i < len(ENGLISH_FREQ_ORDER):
            substitution[letter] = ENGLISH_FREQ_ORDER[i]
    return substitution

def decrypt(ciphertext, substitution):
    decrypted_text = ''
    for char in ciphertext:
        if char.upper() in substitution:
            sub = substitution[char.upper()]
            decrypted_text += sub.lower() if char.islower() else sub
        else:
            decrypted_text += char  # Keep punctuation, spaces, etc.
    return decrypted_text

# Example ciphertext (you can replace this)
ciphertext = "Gsrh rh z hvxivg nvhhztv"

# Step-by-step process
cipher_freq = frequency_analysis(ciphertext)
substitution = build_substitution_table(cipher_freq)
plaintext = decrypt(ciphertext, substitution)

print("Guessed substitution table:", substitution)
print("Decrypted text:", plaintext)
